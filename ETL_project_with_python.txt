# Code for ETL operations on World's Largest Banks

# Importing the required libraries

from bs4 import BeautifulSoup
import requests
import pandas as pd
import numpy as np
import sqlite3
from datetime import datetime 

# This function logs the mentioned message of a given stage of the
# code execution to a log file. Function returns nothing

def log_progress(message):
    timestamp_format = '%Y-%h-%d-%H:%M:%S' # Year-Monthname-Day-Hour-Minute-Second 
    now = datetime.now() # get current timestamp 
    timestamp = now.strftime(timestamp_format) 
    with open(log_file,"a") as f: 
        f.write(timestamp + ' : ' + message + '\n') 

# The purpose of this function is to extract the required
# information from the website and save it to a dataframe. The
# function returns the dataframe for further processing.

def extract(url, table_attribs):
    page = requests.get(url).text
    soup = BeautifulSoup(page,'html.parser')
    df = pd.DataFrame(columns=table_attribs)
    tables = soup.find_all('tbody')
    rows = tables[0].find_all('tr')
    
    for row in rows:
        col = row.find_all("td")
        if len(col) != 0:
            data_dict = {"Name": col[1].find_all("a")[1]["title"],
                         "MC_USD_Billion": float(col[2].contents[0][:-1])}
            df1 = pd.DataFrame(data_dict, index=[0])
            df = pd.concat([df, df1], ignore_index=True)

  

    return df

# This function Transforms the dataframe by adding three columns for Market Capitalization in GBP, EUR and INR, rounded to 2 decimal places, 
# based on the exchange rate information shared as a CSV file.

def transform(df, csv_path):
    exchange_rate = pd.read_csv(csv_path)
    dict = exchange_rate.set_index('Currency').to_dict()['Rate']

    df['MC_GBP_Billion'] = [np.round(x*dict['GBP'],2) for x in df['MC_USD_Billion']]
    df['MC_EUR_Billion'] = [np.round(x*dict['EUR'],2) for x in df['MC_USD_Billion']]
    df['MC_INR_Billion'] = [np.round(x*dict['INR'],2) for x in df['MC_USD_Billion']] 

    return df 

# This function saves the final dataframe as a `CSV` file 
# in the provided path. Function returns nothing

def load_to_csv(df, output_path):
    df.to_csv(output_path)

# This function saves the final dataframe to as a database table
# with the provided name. Function returns nothing.

def load_to_db(df, sql_connection, table_name):
    df.to_sql(table_name, sql_connection, if_exists='replace', index=False)

# This function runs the stated query on the database table and
# prints the output on the terminal. Function returns nothing

def run_query(query_statement, sql_connection):
    print(query_statement)
    query_output = pd.read_sql(query_statement, sql_connection)
    print(query_output)

# Here, you define the required entities and call the relevant 
# functions in the correct order to complete the project. Note that this
# portion is not inside any function

url = 'https://web.archive.org/web/20230908091635/https://en.wikipedia.org/wiki/List_of_largest_banks'
csv_path = "https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMSkillsNetwork-PY0221EN-Coursera/labs/v2/exchange_rate.csv"

table_attribs = ["Name", "MC_USD_Billion"]
output_path = "./Largest_banks_data.csv"
db_name = 'Banks.db'
table_name = 'Largest_banks'
log_file = "./code_log.txt"


log_progress('Preliminaries complete. Initiating ETL process.')

df = extract(url, table_attribs)
print(df)
log_progress('Data extraction complete. Initiating Transformation process.')


df = transform(df, csv_path)
print(df)
log_progress('Data transformation complete. Initiating loading process.')

load_to_csv(df, output_path)
log_progress('Data saved to CSV file.')

sql_connection = sqlite3.connect(db_name)

log_progress("SQL Connection initiated")

# Call load_to_db()
load_to_db(df, sql_connection, table_name)

log_progress("Data loaded to Database as a table, Executing queries")

# For calling run_query()
# To print the contents of the entire table
query_statement = f"SELECT * from {table_name}"
run_query(query_statement, sql_connection)

# To print the average market capitalization of all the banks in Billion GBP
query_statement = f"SELECT AVG(MC_GBP_Billion) FROM {table_name}"
run_query(query_statement, sql_connection)

# To print only the names of the top 5 banks
query_statement = f"SELECT Name from {table_name} LIMIT 5"
run_query(query_statement, sql_connection)

log_progress("Process Complete")

# for closing the SQLite3 connection
sql_connection.close()

log_progress("Server Connection closed")

# To verify log entries
with open(log_file, "r") as log:
    LogContent = log.read()
    print(LogContent)
